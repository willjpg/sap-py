import win32com.client
import time
import psutil
import subprocess
from dotenv import load_dotenv
import os

# Carrega o arquivo .env
load_dotenv()

class SAPAutomation:
    def __init__(self):
        """Inicializa a classe SAPAutomation com as credenciais."""
        self.server_name = os.getenv("SAP_SERVER_NAME")
        self.client = os.getenv("SAP_CLIENT")
        self.username = os.getenv("SAP_USERNAME")
        self.password = os.getenv("SAP_PASSWORD")
        self.language = os.getenv("SAP_LANGUAGE", "EN")

    def is_saplogon_running(self):
        """Verifica se o processo saplogon.exe está em execução."""
        for process in psutil.process_iter(['name']):
            if process.info['name'] == 'saplogon.exe':
                return True
        return False

    def start_saplogon(self):
        """Inicia o SAP Logon se não estiver em execução."""
        try:
            subprocess.Popen([r"C:\Program Files (x86)\SAP\FrontEnd\SapGui\saplogon.exe"])
            time.sleep(5)  # Espera alguns segundos para o SAP Logon iniciar
            print("SAP Logon iniciado com sucesso.")
        except Exception as e:
            print(f"Erro ao iniciar SAP Logon: {e}")

    def is_logged_in(self):
        """Verifica se já existe uma sessão ativa no SAP GUI."""
        try:
            # Conectar ao SAP GUI
            SapGuiAuto = win32com.client.GetObject("SAPGUI")
            application = SapGuiAuto.GetScriptingEngine()

            # Verifica se há uma conexão ativa
            if application.Children.Count > 0:
                connection = application.Children(0)
                if connection.Children.Count > 0:
                    session = connection.Children(0)
                    if session.Info.Transaction == "":
                        return True  # Está logado, mas não em nenhuma transação específica
                    else:
                        return True  # Está logado e em alguma transação
            return False  # Não há sessão ativa
        except Exception as e:
            print(f"Erro ao verificar login: {e}")
            return False

    def login_to_sap(self):
        """Realiza o login no SAP GUI."""
        try:
            # Conectar ao SAP GUI
            SapGuiAuto = win32com.client.GetObject("SAPGUI")
            application = SapGuiAuto.GetScriptingEngine()

            # Abre a conexão com o servidor SAP
            connection = application.OpenConnection(self.server_name, True)
            session = connection.Children(0)

            # Preencher as credenciais
            session.findById("wnd[0]/usr/txtRSYST-MANDT").text = self.client  # Cliente (mandante)
            session.findById("wnd[0]/usr/txtRSYST-BNAME").text = self.username  # Nome de usuário
            session.findById("wnd[0]/usr/pwdRSYST-BCODE").text = self.password  # Senha
            session.findById("wnd[0]/usr/txtRSYST-LANGU").text = self.language  # Idioma

            # Simula o pressionamento de Enter para fazer login
            session.findById("wnd[0]").sendVKey(0)  # VKey 0 simula o Enter
            time.sleep(2)  # Espera a conexão ser estabelecida
            
            print("Login realizado com sucesso.")
        except Exception as e:
            print(f"Erro ao fazer login: {e}")

    def run(self):
        """Função principal que verifica se o SAP Logon está rodando e faz o login se necessário."""
        if not self.is_saplogon_running():
            print("SAP Logon não está aberto. Iniciando...")
            self.start_saplogon()
        else:
            print("SAP Logon já está rodando.")
        
        # Verifica se já está logado no SAP
        if self.is_logged_in():
            print("Já está logado no SAP. Focando na janela existente.")
        else:
            print("Não está logado. Fazendo login...")
            self.login_to_sap()

# Exemplo de execução
if __name__ == "__main__":
    sap_automation = SAPAutomation()
    sap_automation.run()